<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="OffMeetMapper">

	<resultMap type="offMeet" id="offmeetSelectMap">
		<result property="offNo" 				column="OFF_NO" 		jdbcType="INTEGER"/>
  		<result property="user.userId" 	column="USER_ID" 		jdbcType="VARCHAR"/>
  		<result property="meet.meetId" 		column="MEET_ID"		jdbcType="VARCHAR"/>
  		<result property="offName"		column="OFF_NAME" jdbcType="VARCHAR"/>
  		<result property="offLoc" 		column="OFF_LOC" 	jdbcType="VARCHAR"/>
  		<result property="offMax" 		column="OFF_MAX" jdbcType="INTEGER"/>
  		<result property="offMem" 			column="OFF_MEM" 		jdbcType="INTEGER"/>
  		<result property="amount" 			column="AMOUNT" 	    jdbcType="INTEGER"/>
  		<result property="offDate" 			column="OFF_DATE" 	    jdbcType="VARCHAR"/>
  		<result property="offTime" 			column="OFF_TIME" 		jdbcType="VARCHAR"/>
  		<result property="imageFile"        column="IMAGE_FILE"     jdbcType="VARCHAR"/>
  		<result property="regDate"          column="REG_DATE"       jdbcType="DATE"/>  		 
 		
 		<result property="meetName" 			column="meet_name" 	jdbcType="VARCHAR"/>
 		<result property="payNo" 				column="PAY_NO" 		jdbcType="INTEGER"/>
 		
  	</resultMap>
  	
	<resultMap type="pay" id="paySelectMap">
		<result property="payNo" 				column="PAY_NO" 		jdbcType="INTEGER"/>
  		<result property="user.userId" 	column="USER_ID" 		jdbcType="VARCHAR"/>
  		<result property="meet.meetId" 		column="MEET_ID"		jdbcType="VARCHAR"/>
  		<result property="offMeet.offNo" 		column="OFF_NO"		jdbcType="INTEGER"/>
		<result property="business.businessId" 		column="BUSINESS_ID"		jdbcType="VARCHAR"/>	
  		<result property="reserveMemNum"		column="RESERVE_MEM_NUM" jdbcType="INTEGER"/>
  		<result property="reserveStartTime" 		column="RESERVE_START_TIME" 	jdbcType="VARCHAR"/>
  		<result property="reserveEndTime" 		column="RESERVE_END_TIME" jdbcType="VARCHAR"/>
  		<result property="reserveDate" 			column="RESERVE_DATE" 		jdbcType="VARCHAR"/>
  		<result property="totalAmount" 			column="TOTAL_AMOUNT" 	jdbcType="INTEGER"/>
  	    <result property="payStatus" 		column="PAY_STATUS"	jdbcType="CHAR"/>
  		<result property="payDate" 			column="PAY_DATE" 	jdbcType="DATE"/>
  		<result property="payMethod" 			column="PAY_METHOD" 		jdbcType="CHAR"/> 
  		<result property="reserveAbleNo" 			column="RESERVE_ABLE_NO" 		jdbcType="INTEGER"/>
  		
  		<result property="businessName" column="business_name"  jdbcType="VARCHAR"/>
  		<result property="meetName" column="meet_name"  jdbcType="VARCHAR"/> 
  		<result property="bank" column="bank"           jdbcType="VARCHAR"/>		 
  		<result property="accNum" column="accNum"        jdbcType="VARCHAR"/>
  	</resultMap>
   	
   	
   	<resultMap type= "meetMemOffMeet" id="meetmemoffmeetSelectMap">
   	<result property="meetMemOffmeetNO" column="MEETMEM_OFFMEET_NO"  jdbcType="INTEGER"/>
   	<result property="meetMem.memNo"   column ="MEM_NO"         jdbcType="INTEGER"/>
    <result property="offMeet.offNo"	column="OFF_NO" 		jdbcType="INTEGER"/>
		
	</resultMap>
   	
   	 	
   	<insert id="addOff_MeetMem" parameterType="map">
	INSERT INTO meetmem_offmeet (meetmem_offmeet_no, mem_no, off_no) 
	VALUES (seq_meetmem_offmeet_no.nextval, #{memNo}, #{offNo})
	</insert>
	
	<select id="getOff_MeetMem" parameterType="map" resultMap="meetmemoffmeetSelectMap">
		SELECT meetmem_offmeet_no, mem_no, off_no 
		FROM meetmem_offmeet 
		WHERE mem_no = #{memNo}
		AND off_no = #{offNo}
	</select>
	
	
	<select id="getOff" parameterType="int" resultMap="offmeetSelectMap">
  		SELECT 
 		off_no, user_id, meet_id, off_name, off_loc, off_max, off_mem, amount, off_date, off_time, image_File, reg_date
		FROM offmeet
		WHERE
		off_no = #{offNo}
  	</select>
  	
	<insert id="addOff" parameterType="offMeet">
		INSERT 
		INTO offmeet(off_no, user_id, meet_id, off_name, off_loc, off_max, off_mem, amount, off_date, off_time, image_file, reg_date)
		VALUES (
					seq_offmeet_off_no.NEXTVAL,
					#{user.userId:VARCHAR},
					#{meet.meetId:VARCHAR},
					#{offName:VARCHAR},
					#{offLoc:VARCHAR},
					#{offMax:INTEGER},
					#{offMem:INTEGER},
					#{amount:INTEGER},
					#{offDate:VARCHAR},
					#{offTime:VARCHAR},
					#{imageFile:VARCHAR},
					SYSDATE
					)
	</insert>
	
  	<update	id="updateOff"	parameterType="int" >
	   	UPDATE offmeet
	   	<set>
			off_name = #{offName:VARCHAR},
			off_loc = #{offLoc:VARCHAR}
	   	</set>
	   	WHERE off_no = #{offNo}
	 </update>

	<delete id="delOffMeet" parameterType="String">
	DELETE FROM offmeet
	WHERE off_no = #{offNo}
	</delete>
	
	
	<select  id="getOffList"  parameterType="String"	resultMap="offmeetSelectMap">
		SELECT * FROM (
		SELECT o.off_no, u.user_id, m.meet_id, o.off_name, o.off_loc, o.off_max, o.off_mem, o.amount, o.off_date, o.off_time, o.image_File, o.reg_date
		FROM offmeet o, meet m, users u
		WHERE
		u.user_id(+) = o.user_id
		AND m.meet_id(+) = o.meet_id
		AND m.meet_id = #{meet.meetId} )
		WHERE SYSDATE -7 &lt;  reg_date 
		order by off_no desc
	 </select>
	
	
	 
	<select id="getOffMeetList" parameterType="map" resultMap="offmeetSelectMap">
  		SELECT *
  		FROM ( SELECT inner_table.*, ROWNUM AS row_seq
  			FROM (  SELECT o.off_no, p.user_id, m.meet_id, m.meet_name, o.off_name, o.off_loc, o.off_max, o.off_mem, o.amount, o.off_date, o.off_time, o.image_File, o.reg_date, p.pay_no
				FROM offmeet o, meet m, users u, pay p
					WHERE  	
					o.off_no(+) = p.off_no	
					AND	u.user_id(+) = p.user_id
					AND m.meet_id(+) = p.meet_id
					AND u.user_id = #{userId}
					order by pay_no desc ) inner_table
  						WHERE ROWNUM <![CDATA[<=]]> #{search.currentPage}*#{search.pageSize} )
  		WHERE row_seq BETWEEN (#{search.currentPage}-1)*#{search.pageSize}+1
  		AND #{search.currentPage}*#{search.pageSize}
	</select>
	
	<update id ="updateOffMem" parameterType="pay">
	UPDATE offmeet
	<set>
	off_mem = off_mem +1
	</set>
	WHERE off_no = #{offMeet.offNo}
	</update>
	 
		  
	 <insert id="addOffPay" parameterType ="pay">
	 	INSERT 
		INTO pay(pay_no, user_id, meet_id, off_no, total_amount, pay_date, pay_method)
		VALUES (
					seq_pay_pay_no.NEXTVAL,
					#{user.userId:VARCHAR},
					#{meet.meetId:VARCHAR},
					#{offMeet.offNo:INTEGER},
					#{totalAmount:INTEGER},
					SYSDATE,
					#{payMethod:CHAR}
					)
	</insert>
	 
	 
	  <update id="updateStatus"	parameterType="pay"   >
	   	UPDATE pay
	   	<set>
			PAY_STATUS = #{payStatus}
	   	</set>
	   	WHERE pay_id = #{payId} 
	 </update>
	 
	 
	 
	 <select id="getOffPay" parameterType="int" resultMap="paySelectMap">
  		SELECT 
		p.pay_no, p.pay_date, p.user_id, p.meet_id, p.off_no, p.total_Amount, p.pay_date, p.pay_method, m.meet_name , m.bank, m.accnum
		FROM pay p , offmeet o, meet m, users u
		WHERE
     	p.user_id = u.user_id(+)
     	AND o.off_no(+) = p.off_no
     	AND m.meet_id(+) = p.meet_id
        AND p.pay_no= #{payNo}
  	</select>
  	
	
											
		 
	<select id="listOffPay" parameterType="map" resultMap="offmeetSelectMap">
  		SELECT *
  		FROM ( SELECT inner_table.*, ROWNUM AS row_seq
  			FROM (  SELECT o.off_no, p.user_id, m.meet_id, m.meet_name, o.off_name, o.off_loc, o.off_max, o.off_mem, o.amount, o.off_date, o.off_time, o.image_File, o.reg_date, p.pay_no
				FROM offmeet o, meet m, users u, pay p
					WHERE  	
					o.off_no(+) = p.off_no	
					AND	u.user_id(+) = p.user_id
					AND m.meet_id(+) = p.meet_id
					AND u.user_id = #{userId}
					AND p.pay_status = 0
					order by pay_no desc ) inner_table
  						WHERE ROWNUM <![CDATA[<=]]> #{search.currentPage}*#{search.pageSize} )
  		WHERE row_seq BETWEEN (#{search.currentPage}-1)*#{search.pageSize}+1
  		AND #{search.currentPage}*#{search.pageSize}
	</select>
	
	
  	 <select  id="getOffPayTotalCount"  parameterType="search"	 resultType="int">
	  	SELECT COUNT(*)
		FROM ( SELECT pay_no, user_id, meet_id, off_no, business_id, total_amount, pay_date, pay_method, reserve_date, reserve_start_time, reserve_end_time, reserve_mem_num, pay_status, reserve_able_no
				FROM pay
				WHERE user_id = #{userId}
				AND pay_status = 0
			 ) countTable						
	 </select>  		 	
	 
	   <insert id="addBusinessPay" parameterType ="pay">
	 	INSERT 
		INTO pay(pay_no, user_id, meet_id, off_no, business_id, total_amount, pay_date, pay_method, reserve_date, reserve_start_time, reserve_end_time, reserve_mem_num, pay_status, reserve_able_no )
		VALUES (
					seq_pay_pay_no.NEXTVAL,
					#{user.userId:VARCHAR},
					#{meet.meetId:VARCHAR},
					#{offMeet.offNo:INTEGER},
				    #{business.businessId:VARCHAR},
					#{totalAmount:INTEGER},
					SYSDATE,
					#{payMethod:CHAR},
					#{reserveDate:VARCHAR},
					#{reserveStartTime:VARCHAR},
					#{reserveEndTime:VARCHAR},
					#{reserveMemNum:INTEGER},
				    #{payStatus:CHAR},
				    #{reserveAbleNo:INTEGER}
					)
	</insert>
	
	 
	 <select id="getBusinessPay" parameterType="int" resultMap="paySelectMap">
  		SELECT 
		p.pay_no, p.pay_date, p.user_id, p.meet_id, b.business_id, b.business_name, p.total_amount, p.reserve_mem_num, p.reserve_start_time, p.reserve_end_time, p.reserve_date, p.pay_method, p.pay_status, p.reserve_able_no
		FROM pay p , business b, meet m, offmeet o, users u
		WHERE
		p.user_id = u.user_id(+)
		AND p.off_no = o.off_no(+)
     	AND p.meet_id = m.meet_id(+)
		AND p.business_id = b.business_id(+)
		AND p.pay_no = #{payNo}
  	</select>
  	 	 		
	 
	   	  <select id="listBusinessPay" parameterType="map" resultMap="paySelectMap">
	  		SELECT *
	  		FROM ( SELECT inner_table.*, ROWNUM AS row_seq
	  						FROM (  SELECT p.pay_no, p.user_id,  b.business_id, b.business_name, p.reserve_date,  p.total_amount,  p.reserve_mem_num, p.reserve_start_time, p.reserve_end_time,  p.pay_date, p.pay_status, p.reserve_able_no,
	  								 p.pay_method
											FROM pay p , offmeet o, meet m, users u, business b
											WHERE 
											p.user_id = u.user_id(+)
											AND p.off_no = o.off_no(+)
											AND p.meet_id = m.meet_id(+)
											AND p.business_id = b.business_id(+)
											AND p.user_id = #{userId}
											AND p.pay_status = 1
											ORDER BY p.pay_no DESC ) inner_table
	  						WHERE ROWNUM <![CDATA[<=]]> #{search.currentPage}*#{search.pageSize} )
	  		WHERE row_seq BETWEEN (#{search.currentPage}-1)*#{search.pageSize}+1
	  		AND #{search.currentPage}*#{search.pageSize}
	</select>
	
	
	  	 <select  id="getBusinessPayTotalCount"  parameterType="search"	 resultType="int">
	  	SELECT COUNT(*)
		FROM ( SELECT p.pay_no, p.meet_id, p.user_id, o.off_no, b.business_id,   p.total_amount  , p.reserve_mem_num, p.reserve_start_time, p.reserve_end_time,  p.pay_date, p.pay_status, p.reserve_able_no,
	  								 p.pay_method
											FROM pay p , offmeet o, meet m, users u, business b
											WHERE 
											p.user_id = u.user_id(+)
											AND p.off_no = o.off_no(+)
											AND p.meet_id = m.meet_id(+)
											AND p.business_id = b.business_id(+)
											AND p.user_Id = #{userId}
											AND p.pay_status = 1
											ORDER BY p.pay_no
			 ) countTable						
	 </select>  	
	

	
	<select id="listOffMem"		parameterType="search"	resultMap="paySelectMap">
		SELECT u.user_name
		FROM pay p, meet m, offmeet o, users u
		WHERE p.off_no = #{offNo}
		AND p.off_no  = o.off_no(+)
		AND p.meet_id = m.meet_id(+)
		AND p.user_id = u.user_id(+)
		ORDER BY pay_no ASC
	</select>
	
	 <select  id="getTotalOffMemCount"  parameterType="search"	 resultType="int">
	  	SELECT COUNT(*)
	  	FROM  (	SELECT p.pay_no, p.off_no, p.meet_id, p.user_id
					FROM  pay p, meet m, offmeet o, users u
					WHERE o.off_no = #{searchKeyword}
					AND p.off_no  = o.off_no(+)
					AND p.meet_id = m.meet_id(+)
					AND p.user_id = u.user_id(+)
					ORDER BY pay_no ASC
					 ) countTable		
	 </select>
	 

<select  id="getReserveTotalCount"  parameterType="search"	 resultType="int">
	SELECT COUNT(*)
		FROM(SELECT p.pay_no , p.user_id , m.meet_id, m.meet_name, b.business_id, p.reserve_start_time, p. reserve_end_time, p.reserve_date, p.reserve_able_no
		FROM pay p, meet m , users u , business b
		WHERE
		u.user_id(+) = p.user_id
		AND m.meet_id(+) = p.meet_id
		AND b.business_id(+)  = p.business_id
		AND p.pay_status = 1
		<if test="searchCondition != null">
		<where>
			<if test="searchCondition == 0 and searchKeyword !='' ">
				p.pay_no LIKE '%' || ${searchKeyword} || '%'
	       </if>
			<if test="searchCondition == 1 and searchKeyword !='' ">
				m.meet_name LIKE '%' || ${searchKeyword} || '%'
		  	</if>
			<if test="searchCondition == 2 and searchKeyword !='' ">
				p.user_id LIKE '%' || ${searchKeyword} || '%'
		 </if>
		</where>
		</if> ) countTable
		</select>
		
	
		
	<select id="listReserveBusiness"		parameterType="search"	resultMap="paySelectMap">
		SELECT *
	  	FROM (	SELECT inner_table.* , ROWNUM AS row_seq
	  			FROM (SELECT p.pay_no , p.user_id , m.meet_id, m.meet_name, b.business_id, p.reserve_start_time, p.reserve_date, reserve_end_time, p.reserve_date, p.reserve_able_no
		FROM pay p, meet m , users u , business b
		WHERE
		u.user_id(+) = p.user_id
		AND m.meet_id(+) = p.meet_id
		AND b.business_id(+)  = p.business_id
		AND p.pay_status = 1
		<if test="searchCondition != null">
		<where>
			<if test="searchCondition == 0 and searchKeyword !='' ">
				p.pay_no LIKE '%' || ${searchKeyword} || '%'
	       </if>
			<if test="searchCondition == 1 and searchKeyword !='' ">
				m.meet_name LIKE '%' || ${searchKeyword} || '%'
		  	</if>
			<if test="searchCondition == 2 and searchKeyword !='' ">
				p.user_id LIKE '%' || ${searchKeyword} || '%'
			 </if>
		</where>
	</if>
						ORDER BY p.pay_no ) inner_table
				WHERE ROWNUM &lt;= #{endRowNum} )
		WHERE row_seq BETWEEN #{startRowNum} AND #{endRowNum} 
	</select>
	
	
		<select id="getReserveBusiness"		parameterType="int"	resultMap="paySelectMap">
		SELECT p.pay_no , m.meetId, m.meet_name, b.business_id, p.user_id, p.reserve_mem_num, p.reserve_start_time, p.reserve_end_time, p.total_amount, p.pay_date
		FROM pay p , meet m , business b
		WHERE p.pay_no = #{payNo}
		AND m.meet_Id(+) = p.meet_Id
		AND b.business_Id(+) = p.business_Id
		</select>
</mapper>





